use std::env;
use hyper::{Client, Uri};
use std::time::{Instant, Duration};


async fn send_req(adr: String) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    let client = Client::new();
    let uri = adr.parse::<Uri>()?;
    let start_time = Instant::now();
    let res = client.get(uri).await?;
    let end_time = Instant::now();
    let elapsed_time = end_time - start_time;
    println!("Request took: {:.2?}", elapsed_time); // Print elapsed time
    println!("Ended with status: {}", res.status());
    let body_bytes = hyper::body::to_bytes(res.into_body()).await?;
    let body_str = String::from_utf8(body_bytes.to_vec())?;
    println!("Contents: {}", body_str);
    Ok(())
}

#[tokio::main]
async fn main() {
    let args: Vec<_> = env::args().collect();
    match args.len() {
        1 => {
            // Display help menu
            println!("#Welcome to CrabPing! A endpoint tester made in rust!\n============================");
            println!("#CrabPing [HttpReq] [Amount]\n============================");
            println!("#Running just CrabPing shows the help menu that you're using");
            println!("#[HttpReq] this is the endpoint you want to hit");
            println!("#[Amount] how many requests you want to send, max is 1000");
        },
        2 => {
            let _ = send_req(args[1].to_string()).await.unwrap();
        },
        3 => {},
        _ => {},
    }
    println!("{:?}", args);
}

